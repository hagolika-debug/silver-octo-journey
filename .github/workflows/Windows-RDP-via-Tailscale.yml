name: Windows RDP via Tailscale

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: "Run 5-minute test loop"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime in minutes (max 360; capped to 355)"
        required: false
        default: "355"
      loops:
        description: "How many handoffs (0 = infinite)"
        required: false
        default: "0"

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

env:
  # --- Use repository secrets instead of in-repo plaintext for these values ---
  # If you keep them here for testing, replace them later with secrets.* references.
  TS_TAILNET: "wadide55@gmail.com"
  TS_APIKEY: "PLACEHOLDER_TS_APIKEY"     # move to secrets.TS_APIKEY
  TS_AUTHKEY: "PLACEHOLDER_TS_AUTHKEY"   # move to secrets.TS_AUTHKEY
  # --- RDP account & host ---
  RDP_USER: rdpuser
  RDP_PASS: "rdprdp@12345"
  TS_HOSTNAME: rdp-windows

jobs:
  rdp:
    runs-on: windows-2022
    timeout-minutes: 370
    steps:
      - name: üîß Resolve inputs (safe)
        id: cfg
        env:
          RAW_TEST:     ${{ inputs.test_mode == true && 'true' || 'false' }}
          RAW_RUNTIME:  ${{ inputs.runtime_minutes || '355' }}
          RAW_LOOPS:    ${{ inputs.loops || '0' }}
        run: |
          function ToIntOr($v, $def){
            if("$v" -match '^\d+$'){ return [int]$v } else { return [int]$def }
          }

          # Fixed values from env
          $tailnet = $env:TS_TAILNET
          $apiKey  = $env:TS_APIKEY
          $authKey = $env:TS_AUTHKEY

          if (-not $tailnet -or -not $apiKey -or -not $authKey) {
            Write-Error "Missing fixed Tailscale env values"; exit 1
          }

          # Robust boolean
          $isTest = ($env:RAW_TEST -match '^(?i:true|1|yes|on)$')

          $runtime = ToIntOr $env:RAW_RUNTIME 355
          if ($isTest) { $runtime = 5 }

          # Ensure ~6h (355) when test_mode is off and value is too small
          if (-not $isTest -and $runtime -lt 6) { $runtime = 355 }
          if ($runtime -gt 360) { $runtime = 355 }

          $loops = ToIntOr $env:RAW_LOOPS 0
          if ($loops -lt 0) { $loops = 0 }

          "tailnet=$tailnet" | Out-File -Append $env:GITHUB_OUTPUT
          "apikey=$apiKey"   | Out-File -Append $env:GITHUB_OUTPUT
          "authkey=$authKey" | Out-File -Append $env:GITHUB_OUTPUT
          "runtime=$runtime" | Out-File -Append $env:GITHUB_OUTPUT
          "loops=$loops"     | Out-File -Append $env:GITHUB_OUTPUT
          Write-Host "Resolved: test=$isTest, runtime=$runtime, loops=$loops"

      - name: ‚öôÔ∏è Install Tailscale (if missing) & show version
        run: |
          $exe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            $url = 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe'
            $dst = "$env:TEMP\tailscale-setup.exe"
            Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
            Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & "C:\Program Files\Tailscale\tailscale.exe" version

      - name: üîê Enable RDP user + firewall
        run: |
          $u="${{ env.RDP_USER }}"; $p="${{ env.RDP_PASS }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      - name: üßπ PURGE any devices containing hostname (startup)
        run: |
          $hdr = @{ Authorization = "Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn  = [uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $hostname = "${{ env.TS_HOSTNAME }}"

          $match = {
            param($d)
            $nm = if ($d.PSObject.Properties['name']) { $d.name } else { $null }
            $hn = if ($d.PSObject.Properties['hostname']) { $d.hostname } else { $null }
            $dns = if ($d.PSObject.Properties['DNSName']) { $d.DNSName } else { $null }

            return (
              ($nm -and ($nm -match "(?i)$hostname")) -or
              ($hn -and ($hn -match "(?i)$hostname")) -or
              ($dns -and ($dns -match "(?i)$hostname"))
            )
          }

          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if (& $match $d) {
                try {
                  Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/devices/{0}" -f $d.id) | Out-Null
                  Write-Host "Deleted at start: $($d.name)"
                } catch {
                  Write-Warning "Failed to delete device $($d.id): $_"
                }
              }
            }
          } catch { Write-Warning "Startup purge failed: $_" }

      - name: üîó Tailscale up + show IP/FQDN/DERP
        id: up
        run: |
          $ts = "C:\Program Files\Tailscale\tailscale.exe"
          & $ts logout | Out-Null
          & $ts up --authkey "${{ steps.cfg.outputs.authkey }}" --hostname "${{ env.TS_HOSTNAME }}" --accept-routes --accept-dns=false
          Start-Sleep -Seconds 2

          $ip4 = (& $ts ip -4 | Select-Object -First 1)
          $status = & $ts status --json | ConvertFrom-Json
          $fqdn = if ($status.Self.PSObject.Properties['DNSName']) { $status.Self.DNSName } else { $null }
          $derp = if ($status.Self.PSObject.Properties['DERP']) { $status.Self.DERP } else { $null }
          "ip4=$ip4"   | Out-File -Append $env:GITHUB_OUTPUT
          "fqdn=$fqdn" | Out-File -Append $env:GITHUB_OUTPUT
          "derp=$derp" | Out-File -Append $env:GITHUB_OUTPUT

          "### RDP`nHost: $env:TS_HOSTNAME`nIPv4: $ip4`nMagicDNS: $fqdn`nDERP: $derp`nUser: $env:RDP_USER`nPass: $env:RDP_PASS" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

      - name: üïê Create Taskbar Timer Script
        run: |
          # Build timer script as an array of lines and write to file to avoid PowerShell here-strings (which break YAML indentation)
          $lines = @(
            'Add-Type -AssemblyName System.Windows.Forms',
            'Add-Type -AssemblyName System.Drawing',
            '',
            '$mins = [int]$args[0]',
            '$endTime = (Get-Date).AddMinutes($mins)',
            '',
            '$form = New-Object System.Windows.Forms.Form',
            '$form.Text = "RDP Timer"',
            '$form.Size = New-Object System.Drawing.Size(250, 80)',
            '$form.StartPosition = "Manual"',
            '$form.Location = New-Object System.Drawing.Point(10, ([System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea.Height - 100))',
            '$form.FormBorderStyle = "FixedToolWindow"',
            '$form.TopMost = $true',
            '$form.ShowInTaskbar = $true',
            '',
            '$label = New-Object System.Windows.Forms.Label',
            '$label.Location = New-Object System.Drawing.Point(10, 15)',
            '$label.Size = New-Object System.Drawing.Size(220, 40)',
            '$label.Font = New-Object System.Drawing.Font("Segoe UI", 12, [System.Drawing.FontStyle]::Bold)',
            '$label.TextAlign = "MiddleCenter"',
            '$form.Controls.Add($label)',
            '',
            '$timer = New-Object System.Windows.Forms.Timer',
            '$timer.Interval = 1000',
            '$timer.Add_Tick({',
            '    $remaining = $endTime - (Get-Date)',
            '    if ($remaining.TotalSeconds -le 0) {',
            '        $label.Text = "Time''s Up!"',
            '        $label.ForeColor = [System.Drawing.Color]::Red',
            '        $timer.Stop()',
            '    } else {',
            '        $hours = [int]$remaining.Hours',
            '        $minutes = [int]$remaining.Minutes',
            '        $seconds = [int]$remaining.Seconds',
            '        $label.Text = "{0:D2}:{1:D2}:{2:D2} remaining" -f $hours, $minutes, $seconds',
            '',
            '        if ($remaining.TotalMinutes -le 10) {',
            '            $label.ForeColor = [System.Drawing.Color]::Red',
            '        } elseif ($remaining.TotalMinutes -le 30) {',
            '            $label.ForeColor = [System.Drawing.Color]::Orange',
            '        } else {',
            '            $label.ForeColor = [System.Drawing.Color]::Green',
            '        }',
            '    }',
            '})',
            '$timer.Start()',
            '',
            '[void]$form.ShowDialog()'
          )
          ($lines -join "`r`n") | Out-File -FilePath "$env:TEMP\RDPTimer.ps1" -Encoding UTF8

      - name: üöÄ Start Timer in Background
        run: |
          $mins = [int]"${{ steps.cfg.outputs.runtime }}"
          # Start hidden powershell to show the WinForms timer using an ArgumentList array (avoids complex quoting)
          $args = @("-NoProfile", "-ExecutionPolicy", "Bypass", "-WindowStyle", "Hidden", "-File", "$env:TEMP\RDPTimer.ps1", $mins)
          Start-Process -FilePath "powershell" -ArgumentList $args -WindowStyle Hidden

      - name: ‚è≥ Keep alive
        run: |
          $mins=[int]"${{ steps.cfg.outputs.runtime }}"
          $end=(Get-Date).AddMinutes($mins)
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            Start-Sleep -Seconds 60
          }

      - name: üßπ PURGE any devices containing hostname (exit)
        if: always()
        run: |
          $hdr = @{ Authorization = "Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn  = [uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $hostname = "${{ env.TS_HOSTNAME }}"

          $match = {
            param($d)
            $nm = if ($d.PSObject.Properties['name']) { $d.name } else { $null }
            $hn = if ($d.PSObject.Properties['hostname']) { $d.hostname } else { $null }
            $dns = if ($d.PSObject.Properties['DNSName']) { $d.DNSName } else { $null }

            return (
              ($nm -and ($nm -match "(?i)$hostname")) -or
              ($hn -and ($hn -match "(?i)$hostname")) -or
              ($dns -and ($dns -match "(?i)$hostname"))
            )
          }

          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if (& $match $d) {
                try {
                  Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/devices/{0}" -f $d.id) | Out-Null
                  Write-Host "Deleted at exit: $($d.name)"
                } catch {
                  Write-Warning "Failed to delete device $($d.id): $_"
                }
              }
            }
          } catch { Write-Warning "Exit purge failed: $_" }

      - name: üîÅ Restart workflow (self-dispatch)
        if: always()
        run: |
          $loops=[int]"${{ steps.cfg.outputs.loops }}"
          if ($loops -eq 1) { Write-Host "Loops finished; not dispatching."; exit 0 }
          if ($loops -gt 1) { $next=$loops-1 } else { $next=0 }

          # Use repo's GITHUB_TOKEN (no need for input PAT)
          $token="${{ github.token }}"
          $body=@{
            ref    = "${{ github.ref_name }}"
            inputs = @{
              test_mode       = "false"
              runtime_minutes = "${{ steps.cfg.outputs.runtime }}"
              loops           = "$next"
            }
          } | ConvertTo-Json -Depth 5

          Invoke-RestMethod -Method POST `
            -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/Windows-RDP-via-Tailscale.yml/dispatches" `
            -Headers @{ Authorization = "Bearer $token"; "Accept"="application/vnd.github+json" } `
            -Body $body
