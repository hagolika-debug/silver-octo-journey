name: macOS VNC via Tailscale (B)

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: "Run 5-minute test loop"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime in minutes (max 360; capped to 355)"
        required: false
        default: "355"
      loops:
        description: "How many handoffs (0 = infinite)"
        required: false
        default: "0"

  # Optional backup: start B when A completes
  workflow_run:
    workflows: ["macOS VNC via Tailscale (A)"]
    types: [completed]

concurrency:
  group: tailscale-vnc-singleton
  cancel-in-progress: false

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: bash

env:
  # --- Fixed credentials/identifiers (EDIT THESE) ---
  TS_TAILNET: "wadide55@gmail.com"
  TS_APIKEY: "tskey-api-kF626rt9vQ11CNTRL-ARaUbRDQRK1EEvUJJJtyK1wivDmSfPLEQ"
  TS_AUTHKEY: "tskey-auth-kg1JajUh5H11CNTRL-i9kZ8H35AdeWUTScYtKhdeq3vpwPrgfsb"
  # --- VNC credentials & hostname ---
  VNC_USER: bullettemporary
  VNC_PASS: Bullet@12345
  TS_HOSTNAME: bullet

jobs:
  vnc:
    runs-on: macos-latest
    timeout-minutes: 370
    steps:
      - name: 🔧 Resolve inputs (safe)
        id: cfg
        env:
          RAW_TEST: ${{ inputs.test_mode == true && 'true' || 'false' }}
          RAW_RUNTIME: ${{ inputs.runtime_minutes || '355' }}
          RAW_LOOPS: ${{ inputs.loops || '0' }}
        run: |
          # Helper function to parse integers
          to_int_or() {
            local val="$1"
            local def="$2"
            if [[ "$val" =~ ^[0-9]+$ ]]; then
              echo "$val"
            else
              echo "$def"
            fi
          }

          # Fixed values from env
          tailnet="$TS_TAILNET"
          apikey="$TS_APIKEY"
          authkey="$TS_AUTHKEY"

          if [[ -z "$tailnet" || -z "$apikey" || -z "$authkey" ]]; then
            echo "Error: Missing fixed Tailscale env values" >&2
            exit 1
          fi

          # Parse test mode
          is_test=false
          if [[ "$RAW_TEST" =~ ^(true|1|yes|on)$ ]]; then
            is_test=true
          fi

          # Parse runtime
          runtime=$(to_int_or "$RAW_RUNTIME" 355)
          if [[ "$is_test" == "true" ]]; then
            runtime=5
          fi

          # Ensure ~6h (355) when test_mode is off and value is too small
          if [[ "$is_test" == "false" && $runtime -lt 6 ]]; then
            runtime=355
          fi
          if [[ $runtime -gt 360 ]]; then
            runtime=355
          fi

          # Parse loops
          loops=$(to_int_or "$RAW_LOOPS" 0)
          if [[ $loops -lt 0 ]]; then
            loops=0
          fi

          echo "tailnet=$tailnet" >> $GITHUB_OUTPUT
          echo "apikey=$apikey" >> $GITHUB_OUTPUT
          echo "authkey=$authkey" >> $GITHUB_OUTPUT
          echo "runtime=$runtime" >> $GITHUB_OUTPUT
          echo "loops=$loops" >> $GITHUB_OUTPUT
          echo "Resolved: test=$is_test, runtime=$runtime, loops=$loops"

      - name: ⚙️ Install Tailscale & show version
        run: |
          # Download and install Tailscale for macOS
          curl -L -o /tmp/tailscale.pkg https://pkgs.tailscale.com/stable/Tailscale-1.88.3-macos.pkg
          sudo installer -pkg /tmp/tailscale.pkg -target /
          
          # Wait for installation to complete
          sleep 2
          
          # Show version (don't start yet, will do in connection step)
          /Applications/Tailscale.app/Contents/MacOS/Tailscale version 2>/dev/null || echo "Tailscale installed"

      - name: 🔐 Enable VNC (Screen Sharing) & create user
        run: |
          username="$VNC_USER"
          password="$VNC_PASS"

          # Create user if doesn't exist
          if ! dscl . -read /Users/$username &>/dev/null; then
            # Find next available UID
            max_uid=$(dscl . -list /Users UniqueID | awk '{print $2}' | sort -n | tail -1)
            new_uid=$((max_uid + 1))
            
            sudo dscl . -create /Users/$username
            sudo dscl . -create /Users/$username UserShell /bin/bash
            sudo dscl . -create /Users/$username RealName "Bullet Temporary"
            sudo dscl . -create /Users/$username UniqueID $new_uid
            sudo dscl . -create /Users/$username PrimaryGroupID 20
            sudo dscl . -create /Users/$username NFSHomeDirectory /Users/$username
            sudo dscl . -passwd /Users/$username "$password"
            
            # Create home directory
            sudo createhomedir -c -u $username
            
            # Add to admin group
            sudo dscl . -append /Groups/admin GroupMembership $username
          else
            # Update password if user exists
            sudo dscl . -passwd /Users/$username "$password"
          fi

          # Enable Screen Sharing (VNC)
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on \
            -clientopts -setvnclegacy -vnclegacy yes \
            -clientopts -setvncpw -vncpw "$password" \
            -restart -agent -privs -all

          # Enable remote management for user
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -users $username -access -on -privs -all

          echo "VNC enabled for user: $username"

      - name: 🧹 PURGE any devices containing 'bullet' (startup)
        run: |
          tailnet_encoded=$(printf %s "${{ steps.cfg.outputs.tailnet }}" | jq -sRr @uri)
          
          response=$(curl -s -H "Authorization: Bearer ${{ steps.cfg.outputs.apikey }}" \
            "https://api.tailscale.com/api/v2/tailnet/$tailnet_encoded/devices" || echo '{"devices":[]}')
          
          echo "$response" | jq -r '.devices[] | select(.name, .hostname, .dnsName | test("bullet"; "i")) | .id' | while read -r device_id; do
            if [[ -n "$device_id" ]]; then
              curl -s -X DELETE \
                -H "Authorization: Bearer ${{ steps.cfg.outputs.apikey }}" \
                "https://api.tailscale.com/api/v2/device/$device_id" || true
              echo "Deleted at start: $device_id"
            fi
          done

      - name: 🔗 Tailscale up (hostname=bullet) + show IP/FQDN/DERP
        id: up
        run: |
          ts="/Applications/Tailscale.app/Contents/MacOS/Tailscale"
          
          # Logout first (ignore errors)
          sudo $ts logout 2>/dev/null || true
          
          # Connect with authkey (this will start the daemon if needed)
          sudo $ts up \
            --authkey "${{ steps.cfg.outputs.authkey }}" \
            --hostname "$TS_HOSTNAME" \
            --accept-routes \
            --accept-dns=false \
            --timeout=30s
          
          sleep 5

          # Get IP and status
          ip4=$(sudo $ts ip -4 2>/dev/null | head -n1 || echo "pending")
          status_json=$(sudo $ts status --json 2>/dev/null || echo '{}')
          
          fqdn=$(echo "$status_json" | jq -r '.Self.DNSName // "N/A"')
          derp=$(echo "$status_json" | jq -r '.Self.DERP // "N/A"')
          
          echo "ip4=$ip4" >> $GITHUB_OUTPUT
          echo "fqdn=$fqdn" >> $GITHUB_OUTPUT
          echo "derp=$derp" >> $GITHUB_OUTPUT

          # Write summary
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          ### VNC (B)
          Host: $TS_HOSTNAME
          IPv4: $ip4
          MagicDNS: $fqdn
          DERP: $derp
          User: $VNC_USER
          Pass: $VNC_PASS
          VNC Port: 5900
          EOF

      - name: ⏳ Keep alive
        run: |
          mins=${{ steps.cfg.outputs.runtime }}
          end_time=$(($(date +%s) + mins * 60))
          
          while [[ $(date +%s) -lt $end_time ]]; do
            left=$(( (end_time - $(date +%s)) / 60 ))
            echo "VNC alive... ($left min left)"
            sleep 60
          done

      - name: 🧹 PURGE any devices containing 'bullet' (exit)
        if: always()
        run: |
          tailnet_encoded=$(printf %s "${{ steps.cfg.outputs.tailnet }}" | jq -sRr @uri)
          
          response=$(curl -s -H "Authorization: Bearer ${{ steps.cfg.outputs.apikey }}" \
            "https://api.tailscale.com/api/v2/tailnet/$tailnet_encoded/devices" || echo '{"devices":[]}')
          
          echo "$response" | jq -r '.devices[] | select(.name, .hostname, .dnsName | test("bullet"; "i")) | .id' | while read -r device_id; do
            if [[ -n "$device_id" ]]; then
              curl -s -X DELETE \
                -H "Authorization: Bearer ${{ steps.cfg.outputs.apikey }}" \
                "https://api.tailscale.com/api/v2/device/$device_id" || true
              echo "Deleted at exit: $device_id"
            fi
          done

      - name: 🔄 Dispatch workflow A (instant, forever by default)
        if: always()
        run: |
          loops=${{ steps.cfg.outputs.loops }}
          
          if [[ $loops -eq 1 ]]; then
            echo "Loops finished; not dispatching."
            exit 0
          fi
          
          if [[ $loops -gt 1 ]]; then
            next=$((loops - 1))
          else
            next=0
          fi

          # Dispatch workflow A
          curl -X POST \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/macOS-VNC-via-Tailscale-A.yml/dispatches" \
            -d "{\"ref\":\"${{ github.ref_name }}\",\"inputs\":{\"test_mode\":\"false\",\"runtime_minutes\":\"${{ steps.cfg.outputs.runtime }}\",\"loops\":\"$next\"}}"
