name: Ubuntu RDP via Tailscale

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: "Run 5-minute test loop"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime in minutes (max 360; capped to 355)"
        required: false
        default: "355"
      loops:
        description: "How many handoffs (0 = infinite)"
        required: false
        default: "0"

concurrency:
  group: tailscale-rdp-ubuntu-singleton
  cancel-in-progress: false

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: bash

env:
  # --- Fixed credentials/identifiers (EDIT THESE) ---
  TS_TAILNET: "wadide55@gmail.com"
  TS_APIKEY: "tskey-api-kF626rt9vQ11CNTRL-ARaUbRDQRK1EEvUJJJtyK1wivDmSfPLEQ"     # Tailscale API key (no 'Bearer')
  TS_AUTHKEY: "tskey-auth-kg1JajUh5H11CNTRL-i9kZ8H35AdeWUTScYtKhdeq3vpwPrgfsb"            # Tailscale authkey
  # --- RDP account & host ---
  RDP_USER: rdpuser
  RDP_PASS: rdprdp@12345
  TS_HOSTNAME: rdp-ubuntu

jobs:
  rdp:
    runs-on: ubuntu-latest
    timeout-minutes: 370
    steps:
      - name: 🔧 Resolve inputs (safe)
        id: cfg
        env:
          RAW_TEST: ${{ inputs.test_mode == true && 'true' || 'false' }}
          RAW_RUNTIME: ${{ inputs.runtime_minutes || '355' }}
          RAW_LOOPS: ${{ inputs.loops || '0' }}
        run: |
          function to_int_or() {
            local val="$1"
            local default="$2"
            if [[ "$val" =~ ^[0-9]+$ ]]; then
              echo "$val"
            else
              echo "$default"
            fi
          }

          # Fixed values from env
          tailnet="$TS_TAILNET"
          apikey="$TS_APIKEY"
          authkey="$TS_AUTHKEY"

          if [[ -z "$tailnet" || -z "$apikey" || -z "$authkey" ]]; then
            echo "Missing fixed Tailscale env values" >&2
            exit 1
          fi

          # Robust boolean
          is_test=false
          if [[ "$RAW_TEST" =~ ^(true|1|yes|on)$ ]]; then
            is_test=true
          fi

          runtime=$(to_int_or "$RAW_RUNTIME" 355)
          if [[ "$is_test" == "true" ]]; then
            runtime=5
          fi

          # Ensure ~6h (355) when test_mode is off and value is too small
          if [[ "$is_test" == "false" && "$runtime" -lt 6 ]]; then
            runtime=355
          fi
          if [[ "$runtime" -gt 360 ]]; then
            runtime=355
          fi

          loops=$(to_int_or "$RAW_LOOPS" 0)
          if [[ "$loops" -lt 0 ]]; then
            loops=0
          fi

          echo "tailnet=$tailnet" >> $GITHUB_OUTPUT
          echo "apikey=$apikey" >> $GITHUB_OUTPUT
          echo "authkey=$authkey" >> $GITHUB_OUTPUT
          echo "runtime=$runtime" >> $GITHUB_OUTPUT
          echo "loops=$loops" >> $GITHUB_OUTPUT
          echo "Resolved: test=$is_test, runtime=$runtime, loops=$loops"

      - name: 📦 Update package lists
        run: |
          sudo apt-get update

      - name: 🖥️ Check for desktop environment and install LXQt if needed
        run: |
          echo "Checking for existing desktop environment..."
          
          # Check for common desktop environments
          desktop_found=false
          
          if command -v gnome-session >/dev/null 2>&1; then
            echo "GNOME desktop found"
            desktop_found=true
          elif command -v startxfce4 >/dev/null 2>&1; then
            echo "XFCE desktop found"
            desktop_found=true
          elif command -v startkde >/dev/null 2>&1; then
            echo "KDE desktop found"
            desktop_found=true
          elif command -v startlxqt >/dev/null 2>&1; then
            echo "LXQt desktop found"
            desktop_found=true
          elif command -v lxsession >/dev/null 2>&1; then
            echo "LXDE desktop found"
            desktop_found=true
          fi
          
          if [[ "$desktop_found" == "false" ]]; then
            echo "No desktop environment found. Installing LXQt..."
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
              lxqt-core \
              lxqt-config \
              openbox \
              lightdm \
              firefox \
              qterminal \
              pcmanfm-qt \
              lxqt-sudo \
              --no-install-recommends
            
            echo "LXQt desktop environment installed successfully"
          else
            echo "Desktop environment already present, skipping installation"
          fi

      - name: 🔐 Install and configure xrdp
        run: |
          # Install xrdp and dependencies
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            xrdp \
            xorgxrdp \
            pulseaudio
          
          # Create RDP user
          if ! id "$RDP_USER" &>/dev/null; then
            sudo useradd -m -s /bin/bash "$RDP_USER"
            echo "$RDP_USER:$RDP_PASS" | sudo chpasswd
            sudo usermod -aG sudo "$RDP_USER"
          else
            echo "$RDP_USER:$RDP_PASS" | sudo chpasswd
          fi
          
          # Configure xrdp
          sudo systemctl enable xrdp
          sudo systemctl start xrdp
          
          # Configure firewall (if ufw is active)
          if sudo ufw status | grep -q "Status: active"; then
            sudo ufw allow 3389/tcp
          fi
          
          # Create .xsession file for the RDP user to use LXQt
          sudo -u "$RDP_USER" bash -c "echo 'startlxqt' > /home/$RDP_USER/.xsession"
          sudo chmod +x "/home/$RDP_USER/.xsession"
          
          echo "xrdp configured successfully"

      - name: ⚙️ Install Tailscale
        run: |
          # Add Tailscale's package signing key and repository
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list
          
          # Install Tailscale
          sudo apt-get update
          sudo apt-get install -y tailscale
          
          # Show version
          tailscale version

      - name: 🧹 PURGE any devices containing hostname (startup)
        run: |
          hostname="${{ env.TS_HOSTNAME }}"
          echo "Looking for devices matching: $hostname"
          
          # Match hostname with optional suffix (e.g., rdp-ubuntu, rdp-ubuntu-1, rdp-ubuntu-2)
          pattern="^$hostname(-[0-9]+)?$"
          
          response=$(curl -s -H "Authorization: Bearer ${{ steps.cfg.outputs.apikey }}" \
            "https://api.tailscale.com/api/v2/tailnet/$(echo '${{ steps.cfg.outputs.tailnet }}' | sed 's/@/%40/g')/devices")
          
          if [[ $? -eq 0 ]]; then
            echo "$response" | jq -r '.devices[] | select(.name // .hostname | test("'"$pattern"'")) | "\(.name // .hostname) \(.id)"' | \
            while read -r device_name device_id; do
              if [[ -n "$device_name" && -n "$device_id" ]]; then
                echo "Deleting device: $device_name (ID: $device_id)"
                curl -s -X DELETE -H "Authorization: Bearer ${{ steps.cfg.outputs.apikey }}" \
                  "https://api.tailscale.com/api/v2/device/$device_id" || \
                  echo "Warning: Failed to delete $device_name"
              fi
            done
          else
            echo "Warning: Startup purge failed"
          fi

      - name: 🔗 Tailscale up + show IP/FQDN/DERP
        id: up
        run: |
          # Logout and connect
          sudo tailscale logout || true
          sudo tailscale up --authkey "${{ steps.cfg.outputs.authkey }}" --hostname "${{ env.TS_HOSTNAME }}" --accept-routes --accept-dns=false
          sleep 2
          
          # Get connection info
          ip4=$(tailscale ip -4 | head -n1)
          status_json=$(tailscale status --json)
          fqdn=$(echo "$status_json" | jq -r '.Self.DNSName')
          derp=$(echo "$status_json" | jq -r '.Self.DERP')
          
          echo "ip4=$ip4" >> $GITHUB_OUTPUT
          echo "fqdn=$fqdn" >> $GITHUB_OUTPUT
          echo "derp=$derp" >> $GITHUB_OUTPUT
          
          # Create summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ### Ubuntu RDP via Tailscale
          Host: $TS_HOSTNAME
          IPv4: $ip4
          MagicDNS: $fqdn
          DERP: $derp
          User: $RDP_USER
          Pass: $RDP_PASS
          Port: 3389
          
          **Connection Instructions:**
          1. Connect to your Tailscale network
          2. Use RDP client to connect to: $ip4:3389 or $fqdn:3389
          3. Login with username: $RDP_USER and password: $RDP_PASS
          EOF

      - name: ⏳ Keep alive
        run: |
          runtime=${{ steps.cfg.outputs.runtime }}
          end_time=$(($(date +%s) + runtime * 60))
          
          while [[ $(date +%s) -lt $end_time ]]; do
            left=$(( (end_time - $(date +%s)) / 60 ))
            echo "Ubuntu RDP alive... ($left min left)"
            sleep 60
          done

      - name: 🧹 PURGE any devices containing hostname (exit)
        if: always()
        run: |
          hostname="${{ env.TS_HOSTNAME }}"
          echo "Looking for devices matching: $hostname"
          
          # Match hostname with optional suffix (e.g., rdp-ubuntu, rdp-ubuntu-1, rdp-ubuntu-2)
          pattern="^$hostname(-[0-9]+)?$"
          
          response=$(curl -s -H "Authorization: Bearer ${{ steps.cfg.outputs.apikey }}" \
            "https://api.tailscale.com/api/v2/tailnet/$(echo '${{ steps.cfg.outputs.tailnet }}' | sed 's/@/%40/g')/devices")
          
          if [[ $? -eq 0 ]]; then
            echo "$response" | jq -r '.devices[] | select(.name // .hostname | test("'"$pattern"'")) | "\(.name // .hostname) \(.id)"' | \
            while read -r device_name device_id; do
              if [[ -n "$device_name" && -n "$device_id" ]]; then
                echo "Deleting device: $device_name (ID: $device_id)"
                curl -s -X DELETE -H "Authorization: Bearer ${{ steps.cfg.outputs.apikey }}" \
                  "https://api.tailscale.com/api/v2/device/$device_id" || \
                  echo "Warning: Failed to delete $device_name"
              fi
            done
          else
            echo "Warning: Exit purge failed"
          fi

      - name: 🔁 Restart workflow (self-dispatch)
        if: always()
        run: |
          loops=${{ steps.cfg.outputs.loops }}
          if [[ "$loops" -eq 1 ]]; then
            echo "Loops finished; not dispatching."
            exit 0
          fi
          
          if [[ "$loops" -gt 1 ]]; then
            next=$((loops - 1))
          else
            next=0
          fi
          
          # Use repo's GITHUB_TOKEN (no need for input PAT)
          curl -X POST \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "Accept: application/vnd.github+json" \
            -d "{
              \"ref\": \"${{ github.ref_name }}\",
              \"inputs\": {
                \"test_mode\": \"false\",
                \"runtime_minutes\": \"${{ steps.cfg.outputs.runtime }}\",
                \"loops\": \"$next\"
              }
            }" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/Ubuntu-RDP-via-Tailscale.yml/dispatches"
